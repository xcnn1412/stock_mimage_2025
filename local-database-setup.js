// üõ†Ô∏è Local Database Setup Script
// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• local ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö

class LocalDatabaseSetup {
    constructor() {
        this.dbName = 'OfficeSupplyTestDB';
        this.version = 1;
        this.db = null;
    }

    async initialize() {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open(this.dbName, this.version);

            request.onerror = () => reject(request.error);
            
            request.onsuccess = () => {
                this.db = request.result;
                console.log('‚úÖ Local Database ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                resolve(this.db);
            };

            request.onupgradeneeded = (event) => {
                const db = event.target.result;
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á Object Stores (‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
                this.createItemsStore(db);
                this.createBagsStore(db);
                this.createEventsStore(db);
                
                console.log('üèóÔ∏è Local Database ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
            };
        });
    }

    createItemsStore(db) {
        if (!db.objectStoreNames.contains('items')) {
            const itemsStore = db.createObjectStore('items', { keyPath: 'id' });
            itemsStore.createIndex('status', 'status');
            itemsStore.createIndex('bagId', 'bagId');
            itemsStore.createIndex('purchaseDate', 'purchaseDate');
        }
    }

    createBagsStore(db) {
        if (!db.objectStoreNames.contains('bags')) {
            const bagsStore = db.createObjectStore('bags', { keyPath: 'id' });
            bagsStore.createIndex('status', 'status');
            bagsStore.createIndex('responsible', 'responsible');
        }
    }

    createEventsStore(db) {
        if (!db.objectStoreNames.contains('events')) {
            const eventsStore = db.createObjectStore('events', { keyPath: 'id' });
            eventsStore.createIndex('status', 'status');
            eventsStore.createIndex('date', 'date');
        }
    }

    // ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô IndexedDB
    async migrateFromLocalStorage() {
        try {
            console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á migrate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage...');
            
            const items = JSON.parse(localStorage.getItem('office-items') || '[]');
            const bags = JSON.parse(localStorage.getItem('office-bags') || '[]');
            const events = JSON.parse(localStorage.getItem('office-events') || '[]');

            if (items.length > 0) {
                await this.bulkInsert('items', items);
                console.log(`‚úÖ Migrate ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${items.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
            }

            if (bags.length > 0) {
                await this.bulkInsert('bags', bags);
                console.log(`‚úÖ Migrate ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤ ${bags.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
            }

            if (events.length > 0) {
                await this.bulkInsert('events', events);
                console.log(`‚úÖ Migrate ‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå ${events.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
            }

            return true;
        } catch (error) {
            console.error('‚ùå Migration ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
            return false;
        }
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    async bulkInsert(storeName, dataArray) {
        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction([storeName], 'readwrite');
            const store = transaction.objectStore(storeName);
            
            let completed = 0;
            
            dataArray.forEach(item => {
                const request = store.put(item);
                request.onsuccess = () => {
                    completed++;
                    if (completed === dataArray.length) {
                        resolve();
                    }
                };
                request.onerror = () => reject(request.error);
            });
            
            if (dataArray.length === 0) resolve();
        });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å store
    async getAllData(storeName) {
        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction([storeName], 'readonly');
            const store = transaction.objectStore(storeName);
            const request = store.getAll();
            
            request.onsuccess = () => resolve(request.result);
            request.onerror = () => reject(request.error);
        });
    }

    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô store
    async clearStore(storeName) {
        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction([storeName], 'readwrite');
            const store = transaction.objectStore(storeName);
            const request = store.clear();
            
            request.onsuccess = () => resolve();
            request.onerror = () => reject(request.error);
        });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    async createSampleData() {
        const sampleItems = [
            {
                id: 'item1_' + Date.now(),
                name: '‡∏Å‡∏•‡πâ‡∏≠‡∏á DSLR Canon',
                purchaseDate: '2024-01-15',
                price: 25000,
                status: 'available',
                bagId: null,
                receiptPhoto: null,
                itemPhoto: null
            },
            {
                id: 'item2_' + Date.now(),
                name: '‡πÑ‡∏°‡∏Ñ‡πå‡πÑ‡∏£‡πâ‡∏™‡∏≤‡∏¢ Shure',
                purchaseDate: '2024-01-20',
                price: 8500,
                status: 'available',
                bagId: null,
                receiptPhoto: null,
                itemPhoto: null
            }
        ];

        const sampleBags = [
            {
                id: 'bag1_' + Date.now(),
                name: '‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û',
                responsible: '‡∏ä‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û A',
                status: 'available',
                items: [],
                createdAt: new Date().toISOString()
            }
        ];

        const sampleEvents = [
            {
                id: 'event1_' + Date.now(),
                name: '‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
                date: '2024-02-14',
                time: '10:00',
                location: '‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° ABC',
                customer: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
                responsible: '‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô A',
                status: 'active',
                bags: []
            }
        ];

        try {
            await this.bulkInsert('items', sampleItems);
            await this.bulkInsert('bags', sampleBags);
            await this.bulkInsert('events', sampleEvents);
            
            console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
            return true;
        } catch (error) {
            console.error('‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
            return false;
        }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    async getDatabaseStats() {
        try {
            const items = await this.getAllData('items');
            const bags = await this.getAllData('bags');
            const events = await this.getAllData('events');
            
            return {
                items: items.length,
                bags: bags.length,
                events: events.length,
                total: items.length + bags.length + events.length
            };
        } catch (error) {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
            return { items: 0, bags: 0, events: 0, total: 0 };
        }
    }

    // Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô JSON
    async exportToJSON() {
        try {
            const items = await this.getAllData('items');
            const bags = await this.getAllData('bags');
            const events = await this.getAllData('events');
            
            return {
                items,
                bags,
                events,
                exportDate: new Date().toISOString(),
                version: '1.0'
            };
        } catch (error) {
            console.error('‚ùå Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
            return null;
        }
    }

    // Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON
    async importFromJSON(jsonData) {
        try {
            // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
            await this.clearStore('items');
            await this.clearStore('bags');
            await this.clearStore('events');
            
            // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
            if (jsonData.items) {
                await this.bulkInsert('items', jsonData.items);
            }
            
            if (jsonData.bags) {
                await this.bulkInsert('bags', jsonData.bags);
            }
            
            if (jsonData.events) {
                await this.bulkInsert('events', jsonData.events);
            }
            
            console.log('‚úÖ Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            return true;
        } catch (error) {
            console.error('‚ùå Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
            return false;
        }
    }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
const localDB = new LocalDatabaseSetup();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô console
window.setupLocalDatabase = async function() {
    try {
        await localDB.initialize();
        const stats = await localDB.getDatabaseStats();
        
        console.log('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Local:');
        console.log(`   ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${stats.items} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`   ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤: ${stats.bags} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`   ‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå: ${stats.events} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`   ‡∏£‡∏ß‡∏°: ${stats.total} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        return localDB;
    } catch (error) {
        console.error('‚ùå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Local ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        return null;
    }
};

window.migrateData = async function() {
    if (!localDB.db) {
        console.log('‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô setupLocalDatabase() ‡∏Å‡πà‡∏≠‡∏ô');
        return;
    }
    
    return await localDB.migrateFromLocalStorage();
};

window.createSampleData = async function() {
    if (!localDB.db) {
        console.log('‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô setupLocalDatabase() ‡∏Å‡πà‡∏≠‡∏ô');
        return;
    }
    
    return await localDB.createSampleData();
};

window.exportLocalData = async function() {
    if (!localDB.db) {
        console.log('‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô setupLocalDatabase() ‡∏Å‡πà‡∏≠‡∏ô');
        return;
    }
    
    const data = await localDB.exportToJSON();
    
    if (data) {
        const dataStr = JSON.stringify(data, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        
        const link = document.createElement('a');
        link.href = URL.createObjectURL(dataBlob);
        link.download = `local-database-export-${new Date().toISOString().split('T')[0]}.json`;
        link.click();
        
        console.log('üì§ Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Local ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
};

// Export class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô module
if (typeof module !== 'undefined' && module.exports) {
    module.exports = LocalDatabaseSetup;
}